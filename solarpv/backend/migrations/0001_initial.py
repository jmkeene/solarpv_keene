# Generated by Django 3.1.2 on 2020-11-12 22:48

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('clientid', models.IntegerField(db_column='clientID', primary_key=True, serialize=False)),
                ('client_name', models.CharField(blank=True, db_column='client name', max_length=45, null=True)),
                ('client_type', models.CharField(blank=True, db_column='client type', max_length=45, null=True)),
            ],
            options={
                'db_table': 'client',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('model_number', models.IntegerField(db_column='model number', primary_key=True, serialize=False)),
                ('product_name', models.CharField(blank=True, db_column='product name', max_length=45, null=True)),
                ('cell_technology', models.CharField(blank=True, db_column='cell technology', max_length=45, null=True)),
                ('cell_manufacturer', models.CharField(blank=True, db_column='cell manufacturer', max_length=45, null=True)),
                ('number_of_cells', models.IntegerField(blank=True, db_column='number of cells', null=True)),
                ('number_of_cells_in_series', models.IntegerField(blank=True, db_column='number of cells in series', null=True)),
                ('number_of_series_strings', models.IntegerField(blank=True, db_column='number of series strings', null=True)),
                ('number_of_diodes', models.IntegerField(blank=True, db_column='number of diodes', null=True)),
                ('product_length', models.CharField(blank=True, db_column='product length', max_length=45, null=True)),
                ('product_width', models.CharField(blank=True, db_column='product width', max_length=45, null=True)),
                ('product_weight', models.CharField(blank=True, db_column='product weight', max_length=45, null=True)),
                ('superstate_type', models.CharField(blank=True, db_column='superstate type', max_length=45, null=True)),
                ('superstate_manufacturer', models.CharField(blank=True, db_column='superstate manufacturer', max_length=45, null=True)),
                ('substrate_type', models.CharField(blank=True, db_column='substrate  type', max_length=45, null=True)),
                ('substrate_manufacturer', models.CharField(blank=True, db_column='substrate manufacturer', max_length=45, null=True)),
                ('frame_type', models.CharField(blank=True, db_column='frame type', max_length=45, null=True)),
                ('frame_adhesive', models.CharField(blank=True, db_column='frame adhesive', max_length=45, null=True)),
                ('encapsulate_type', models.CharField(blank=True, db_column='encapsulate type', max_length=45, null=True)),
                ('encapsulate_manufacturer', models.CharField(blank=True, db_column='encapsulate manufacturer', max_length=45, null=True)),
                ('junction_box_type', models.CharField(blank=True, db_column='junction box type', max_length=45, null=True)),
                ('junction_box_manufacturer', models.CharField(blank=True, db_column='junction box manufacturer', max_length=45, null=True)),
            ],
            options={
                'db_table': 'product',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TestSequence',
            fields=[
                ('sequenceid', models.IntegerField(db_column='sequenceID', primary_key=True, serialize=False)),
                ('sequence_name', models.CharField(blank=True, db_column='sequence name', max_length=45, null=True)),
            ],
            options={
                'db_table': 'test sequence',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TestStandard',
            fields=[
                ('standardid', models.IntegerField(db_column='standardID', primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('published_date', models.CharField(blank=True, db_column='published date', max_length=45, null=True)),
            ],
            options={
                'db_table': 'test standard',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('userid', models.IntegerField(db_column='userID', primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, db_column='first name', max_length=45, null=True)),
                ('last_name', models.CharField(blank=True, db_column='last name', max_length=45, null=True)),
                ('middle_name', models.CharField(blank=True, db_column='middle name', max_length=45, null=True)),
                ('job_title', models.CharField(blank=True, db_column='job title', max_length=45, null=True)),
                ('email', models.CharField(blank=True, max_length=45, null=True)),
                ('office_phone', models.IntegerField(blank=True, db_column='office phone', null=True)),
                ('cell_phone', models.IntegerField(blank=True, db_column='cell phone', null=True)),
                ('prefix', models.CharField(blank=True, max_length=45, null=True)),
                ('usercol', models.CharField(blank=True, max_length=45, null=True)),
                ('clientid', models.ForeignKey(blank=True, db_column='clientID', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.client')),
            ],
            options={
                'db_table': 'user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('serviceid', models.IntegerField(db_column='serviceID', primary_key=True, serialize=False)),
                ('service_name', models.CharField(blank=True, db_column='service name', max_length=45, null=True)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('is_fi_required', models.CharField(blank=True, db_column='is FI required', max_length=45, null=True)),
                ('fi_frequency', models.CharField(blank=True, db_column='FI frequency', max_length=45, null=True)),
                ('standardid', models.ForeignKey(blank=True, db_column='standardID', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.teststandard')),
            ],
            options={
                'db_table': 'service',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('locationid', models.IntegerField(db_column='locationID', primary_key=True, serialize=False)),
                ('address1', models.CharField(blank=True, max_length=45, null=True)),
                ('address2', models.CharField(blank=True, max_length=45, null=True)),
                ('city', models.CharField(blank=True, max_length=45, null=True)),
                ('state', models.CharField(blank=True, max_length=45, null=True)),
                ('postal_code', models.IntegerField(blank=True, db_column='postal code', null=True)),
                ('country', models.CharField(blank=True, max_length=45, null=True)),
                ('phone_number', models.IntegerField(blank=True, db_column='phone number', null=True)),
                ('fax_number', models.IntegerField(blank=True, db_column='fax number', null=True)),
                ('clientid', models.ForeignKey(blank=True, db_column='clientID', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.client')),
            ],
            options={
                'db_table': 'location',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.IntegerField(db_column='ID', primary_key=True, serialize=False)),
                ('report_number', models.IntegerField(blank=True, db_column='report number', null=True)),
                ('issue_date', models.IntegerField(blank=True, db_column='issue date', null=True)),
                ('locationid', models.ForeignKey(blank=True, db_column='locationID', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.location')),
                ('model_number', models.ForeignKey(blank=True, db_column='model number', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.product')),
                ('standardid', models.ForeignKey(blank=True, db_column='standardID', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.teststandard')),
                ('userid', models.ForeignKey(blank=True, db_column='userID', null=True, on_delete=django.db.models.deletion.CASCADE, to='backend.user')),
            ],
            options={
                'db_table': 'certificate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PerformanceData',
            fields=[
                ('model_number', models.OneToOneField(db_column='model number', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='backend.product')),
                ('max_system_voltage', models.IntegerField(blank=True, db_column='max system voltage', null=True)),
                ('voc', models.CharField(blank=True, max_length=45, null=True)),
                ('isc', models.CharField(blank=True, max_length=45, null=True)),
                ('vmp', models.CharField(blank=True, max_length=45, null=True)),
                ('imp', models.CharField(blank=True, max_length=45, null=True)),
                ('pmp', models.CharField(blank=True, max_length=45, null=True)),
                ('ff', models.CharField(blank=True, max_length=45, null=True)),
                ('sequenceid', models.ForeignKey(db_column='sequenceID', on_delete=django.db.models.deletion.CASCADE, to='backend.testsequence')),
            ],
            options={
                'db_table': 'performance data',
                'managed': True,
                'unique_together': {('model_number', 'sequenceid')},
            },
        ),
    ]
